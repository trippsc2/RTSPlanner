using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using RTSPlanner.Roslyn.Notify;
using Xunit;

namespace RTSPlanner.Roslyn.UnitTests.Notify;

[ExcludeFromCodeCoverage]
public sealed class NotifyGeneratorTests
{
    [Fact]
    public async Task ShouldGenerateExpectedProperties_WhenNonGenericClass()
    {
        // lang=cs
        const string source =
            """
            using RTSPlanner.Roslyn.Notify;

            namespace TestProject;

            [NotifyingObject]
            public partial class TestClass
            {
                [NotifyingProperty]
                private int _testProperty1;
                
                [NotifyingProperty]
                private int _testProperty2;
            }
            """;
        
        // lang=cs
        const string expectedGeneratedCode =
            """
            // <auto-generated />
            #nullable enable

            namespace TestProject;

            partial class TestClass : global::System.ComponentModel.INotifyPropertyChanged
            {
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
                public event global::System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
                
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
                public int TestProperty1
                {
                    get => _testProperty1;
                    set
                    {
                        if (global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(_testProperty1, value))
                        {
                            return;
                        }
                        
                        _testProperty1 = value;
                        this.PropertyChanged?.Invoke(this, new global::System.ComponentModel.PropertyChangedEventArgs("TestProperty1"));
                    }
                }
                
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
                public int TestProperty2
                {
                    get => _testProperty2;
                    set
                    {
                        if (global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(_testProperty2, value))
                        {
                            return;
                        }
                        
                        _testProperty2 = value;
                        this.PropertyChanged?.Invoke(this, new global::System.ComponentModel.PropertyChangedEventArgs("TestProperty2"));
                    }
                }
            }
            """;
        
        await GeneratorTest<NotifyGenerator>
            .VerifyGeneratorAsync(
                source,
                (NotifyGenerator.NotifyingObjectAttributeHintName, NotifyGenerator.NotifyingObjectAttributeCode),
                (NotifyGenerator.AccessibilityHintName, NotifyGenerator.AccessibilityCode),
                (NotifyGenerator.NotifyingPropertyAttributeHintName, NotifyGenerator.NotifyingPropertyAttributeCode),
                ("TestProject.TestClass.Notify.g.cs", expectedGeneratedCode));
    }

    [Fact]
    public async Task ShouldGenerateExpectedProperties_WhenGenericClass()
    {
        // lang=cs
        const string source =
            """
            using RTSPlanner.Roslyn.Notify;

            namespace TestProject;

            [NotifyingObject]
            public partial class TestClass<T>
            {
                [NotifyingProperty]
                private T _testProperty1;
                
                [NotifyingProperty]
                private int _testProperty2;
            }
            """;
        
        // lang=cs
        const string expectedGeneratedCode =
            """
            // <auto-generated />
            #nullable enable

            namespace TestProject;

            partial class TestClass<T> : global::System.ComponentModel.INotifyPropertyChanged
            {
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
                public event global::System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
                
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
                public T TestProperty1
                {
                    get => _testProperty1;
                    set
                    {
                        if (global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(_testProperty1, value))
                        {
                            return;
                        }
                        
                        _testProperty1 = value;
                        this.PropertyChanged?.Invoke(this, new global::System.ComponentModel.PropertyChangedEventArgs("TestProperty1"));
                    }
                }
                
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
                public int TestProperty2
                {
                    get => _testProperty2;
                    set
                    {
                        if (global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(_testProperty2, value))
                        {
                            return;
                        }
                        
                        _testProperty2 = value;
                        this.PropertyChanged?.Invoke(this, new global::System.ComponentModel.PropertyChangedEventArgs("TestProperty2"));
                    }
                }
            }
            """;
        
        await GeneratorTest<NotifyGenerator>
            .VerifyGeneratorAsync(
                source,
                (NotifyGenerator.NotifyingObjectAttributeHintName, NotifyGenerator.NotifyingObjectAttributeCode),
                (NotifyGenerator.AccessibilityHintName, NotifyGenerator.AccessibilityCode),
                (NotifyGenerator.NotifyingPropertyAttributeHintName, NotifyGenerator.NotifyingPropertyAttributeCode),
                ("TestProject.TestClass.T.Notify.g.cs", expectedGeneratedCode));
    }
}